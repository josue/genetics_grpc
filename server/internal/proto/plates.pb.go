// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plates.proto

/*
Package plates is a generated protocol buffer package.

It is generated from these files:
	plates.proto

It has these top-level messages:
	PlateRequest
	PlateResponse
*/
package plates

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing plates payload
type PlateRequest struct {
	Plate                   int32   `protobuf:"varint,1,opt,name=plate" json:"plate,omitempty"`
	Well                    string  `protobuf:"bytes,2,opt,name=well" json:"well,omitempty"`
	Runtime                 int32   `protobuf:"varint,3,opt,name=runtime" json:"runtime,omitempty"`
	OpticalDensity          float32 `protobuf:"fixed32,4,opt,name=optical_density,json=opticalDensity" json:"optical_density,omitempty"`
	Run                     string  `protobuf:"bytes,5,opt,name=run" json:"run,omitempty"`
	CorrectedOpticalDensity float32 `protobuf:"fixed32,6,opt,name=corrected_optical_density,json=correctedOpticalDensity" json:"corrected_optical_density,omitempty"`
}

func (m *PlateRequest) Reset()                    { *m = PlateRequest{} }
func (m *PlateRequest) String() string            { return proto.CompactTextString(m) }
func (*PlateRequest) ProtoMessage()               {}
func (*PlateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PlateRequest) GetPlate() int32 {
	if m != nil {
		return m.Plate
	}
	return 0
}

func (m *PlateRequest) GetWell() string {
	if m != nil {
		return m.Well
	}
	return ""
}

func (m *PlateRequest) GetRuntime() int32 {
	if m != nil {
		return m.Runtime
	}
	return 0
}

func (m *PlateRequest) GetOpticalDensity() float32 {
	if m != nil {
		return m.OpticalDensity
	}
	return 0
}

func (m *PlateRequest) GetRun() string {
	if m != nil {
		return m.Run
	}
	return ""
}

func (m *PlateRequest) GetCorrectedOpticalDensity() float32 {
	if m != nil {
		return m.CorrectedOpticalDensity
	}
	return 0
}

// The response message from server
type PlateResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *PlateResponse) Reset()                    { *m = PlateResponse{} }
func (m *PlateResponse) String() string            { return proto.CompactTextString(m) }
func (*PlateResponse) ProtoMessage()               {}
func (*PlateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PlateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*PlateRequest)(nil), "plates.PlateRequest")
	proto.RegisterType((*PlateResponse)(nil), "plates.PlateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Plates service

type PlatesClient interface {
	SendPlates(ctx context.Context, opts ...grpc.CallOption) (Plates_SendPlatesClient, error)
}

type platesClient struct {
	cc *grpc.ClientConn
}

func NewPlatesClient(cc *grpc.ClientConn) PlatesClient {
	return &platesClient{cc}
}

func (c *platesClient) SendPlates(ctx context.Context, opts ...grpc.CallOption) (Plates_SendPlatesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Plates_serviceDesc.Streams[0], c.cc, "/plates.Plates/SendPlates", opts...)
	if err != nil {
		return nil, err
	}
	x := &platesSendPlatesClient{stream}
	return x, nil
}

type Plates_SendPlatesClient interface {
	Send(*PlateRequest) error
	CloseAndRecv() (*PlateResponse, error)
	grpc.ClientStream
}

type platesSendPlatesClient struct {
	grpc.ClientStream
}

func (x *platesSendPlatesClient) Send(m *PlateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *platesSendPlatesClient) CloseAndRecv() (*PlateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PlateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Plates service

type PlatesServer interface {
	SendPlates(Plates_SendPlatesServer) error
}

func RegisterPlatesServer(s *grpc.Server, srv PlatesServer) {
	s.RegisterService(&_Plates_serviceDesc, srv)
}

func _Plates_SendPlates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlatesServer).SendPlates(&platesSendPlatesServer{stream})
}

type Plates_SendPlatesServer interface {
	SendAndClose(*PlateResponse) error
	Recv() (*PlateRequest, error)
	grpc.ServerStream
}

type platesSendPlatesServer struct {
	grpc.ServerStream
}

func (x *platesSendPlatesServer) SendAndClose(m *PlateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *platesSendPlatesServer) Recv() (*PlateRequest, error) {
	m := new(PlateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Plates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plates.Plates",
	HandlerType: (*PlatesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendPlates",
			Handler:       _Plates_SendPlates_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "plates.proto",
}

func init() { proto.RegisterFile("plates.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0xcd, 0xee, 0xb6, 0xb2, 0xc3, 0xfa, 0x87, 0x61, 0xc5, 0xe8, 0xa9, 0xf4, 0x62, 0xbd,
	0xec, 0x41, 0x6f, 0x82, 0x37, 0xc1, 0xa3, 0x12, 0x3f, 0xc0, 0x52, 0xdb, 0x41, 0x0a, 0xdd, 0x24,
	0x66, 0x52, 0xc4, 0x8f, 0xe8, 0xb7, 0x92, 0x26, 0x59, 0x71, 0x7b, 0x7b, 0xef, 0xe5, 0xf1, 0x23,
	0xf3, 0x60, 0x65, 0xfb, 0xda, 0x13, 0x6f, 0xac, 0x33, 0xde, 0x60, 0x1e, 0x5d, 0xf9, 0x23, 0x60,
	0xf5, 0x3a, 0x4a, 0x45, 0x9f, 0x03, 0xb1, 0xc7, 0x35, 0x64, 0xe1, 0x49, 0x8a, 0x42, 0x54, 0x99,
	0x8a, 0x06, 0x11, 0x16, 0x5f, 0xd4, 0xf7, 0x72, 0x56, 0x88, 0x6a, 0xa9, 0x82, 0x46, 0x09, 0xc7,
	0x6e, 0xd0, 0xbe, 0xdb, 0x91, 0x9c, 0x87, 0xee, 0xde, 0xe2, 0x0d, 0x9c, 0x19, 0xeb, 0xbb, 0xa6,
	0xee, 0xb7, 0x2d, 0x69, 0xee, 0xfc, 0xb7, 0x5c, 0x14, 0xa2, 0x9a, 0xa9, 0xd3, 0x14, 0x3f, 0xc5,
	0x14, 0xcf, 0x61, 0xee, 0x06, 0x2d, 0xb3, 0x40, 0x1d, 0x25, 0x3e, 0xc0, 0x55, 0x63, 0x9c, 0xa3,
	0xc6, 0x53, 0xbb, 0x9d, 0x42, 0xf2, 0x00, 0xb9, 0xfc, 0x2b, 0xbc, 0x1c, 0xd0, 0xca, 0x5b, 0x38,
	0x49, 0xa7, 0xb0, 0x35, 0x9a, 0x69, 0xfc, 0xe1, 0x8e, 0x98, 0xeb, 0x8f, 0x78, 0xcd, 0x52, 0xed,
	0xed, 0xdd, 0x33, 0xe4, 0xa1, 0xca, 0xf8, 0x08, 0xf0, 0x46, 0xba, 0x4d, 0x6e, 0xbd, 0x49, 0x2b,
	0xfd, 0xdf, 0xe4, 0xfa, 0x62, 0x92, 0x46, 0x7c, 0x79, 0x54, 0x89, 0xf7, 0x3c, 0xcc, 0x79, 0xff,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x10, 0xd4, 0xca, 0xb3, 0x5e, 0x01, 0x00, 0x00,
}
